clear;
close all;
clc;

format shortE;
format compact;


WhatToEvaluate = 2;
% 1 --> Convergence 
% 2 --> ShallowWater Model

switch WhatToEvaluate
    case 1
        %% Convergence
        % Testing previously the code with symetrichal functoins in order to
        % evaluate the convergence error of the code designed
        MainConvergence;
    case 2
        %% Case of Study
        Initialization_Study;
        
        for t = 1:T
            u_save(:, :, t) = u_Time(:,:,1);
            v_save(:, :, t) = v_Time(:,:,1);
            eta_save(:, :, t) = eta_Time(:,:,1);
            
            %Geometry
            Deltaeta = ComputesH(u,v,D + eta - h,L,DeltaT);
            eta_P1 = eta + AdamBashforthIntegral(Deltaeta,eta_Time(:,:,2),eta_Time(:,:,3),t);
            
            eta_P1 = HaloUpdate(eta_P1);
            
            %Velocities due to advective terms
            ut_adv = u_adv(u,v,L,DeltaT);
            vt_adv = u_adv(u,v,L,DeltaT);
            
            %Velocities due to pressure terms
            [ut_press,vt_press] = PressureTerms(eta,g,L,DeltaT);
            
            Deltau = ut_adv + ut_press;
            Deltav = vt_adv + vt_press;
            
            %Time integration
            deltaUS = AdamBashforthIntegral(Deltau,u_Time(:,:,2),u_Time(:,:,3),t);
            deltaVS= AdamBashforthIntegral(Deltav,v_Time(:,:,2),v_Time(:,:,3),t);
            
            US = u + deltaUS;
            VS = v + deltaVS;
            
            %Coriolis
            [U_n1,V_n1] = CoriolistTerms(alpha,f,DeltaT,u,v,US,VS);
            
            %Update velocites
            u_F = HaloUpdate(U_n1);
            v_F = HaloUpdate(V_n1);
            
            eta_P1 = addDroplets(eta_P1, randi([0 2]), t, 10, 0, 0, 2000);
            
            %Update time integrations fields;
            u=u_F;
            u_Time(:,:,1) = u;
            u_Time(:,:,3) = u_Time(:,:,2);
            u_Time(:,:,2) = u_Time(:,:,1);
                
            v = v_F;
            v_Time(:,:,1) = v;
            v_Time(:,:,3) = v_Time(:,:,2);
            v_Time(:,:,2) = v_Time(:,:,1);        
            
            eta = eta_P1;
            eta_Time(:,:,1) = eta; 
            eta_Time(:,:,3) = eta_Time(:,:,2);
            eta_Time(:,:,2) = eta_Time(:,:,1);
            
        end
        
        %% Plots
        MainPlots;
            
    otherwise
        fprintf('Not found, sorry');
end
figure;
title('$$','Interpreter','Latex');
surf(eta_save(:,:,2));

